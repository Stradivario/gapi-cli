{"version":3,"sources":["server.type.ts","server.controller.ts","server.module.ts","main.ts"],"names":[],"mappings":";AAEa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,WAEa,QAAA,uBAAyB,IAAI,EAAA,kBAAkB,CACxD,KAAM,yBACN,OAAQ,KAAO,CACX,OAAQ,CACJ,KAAM,EAAA;;ACFL,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,iBAGA,IAAa,EAAb,MAEI,YACY,GAAA,KAAA,OAAA,EAEJ,IAAA,EAAQ,EACZ,YAAY,KACR,IACA,EAAO,QAAQ,2BAA4B,MAC5C,KAMP,mBAAmB,GACR,MAAA,CACH,OAAQ,KAFhB,EAAA,CAHC,EAAA,KAAK,EAAA,wBACL,EAAA,UAAW,GAA2B,EAAK,OAAO,cAAc,wBAChE,EAAA,eACD,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,SAAA,EAAA,yBAAA,IAAA,EAAA,UAAA,qBAAA,MAfS,EAAgB,EAAA,CAD5B,EAAA,aAIuB,EAAA,oBAAA,CAAa,mBAAb,OAAa,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UAHxB,GAAA,QAAA,iBAAA;;ACEA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,uBAKA,IAAa,EAAb,QAAa,EAAY,EAAA,CAHxB,EAAA,OAAO,CACJ,YAAa,CAAC,EAAA,qBAEL,GAAA,QAAA,aAAA;;ACFb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJA,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,mBACA,EAAA,QAAA,cAEA,EAAA,mBAAmB,EAAA,aAAc,CAAC,EAAA,WAAW,QAAQ,CACjD,QAAS,CACL,UAAU,EACV,oBAAoB,OAEvB,UACD,IAAM,QAAQ,IAAI,kBAClB,QAAQ,MAAM,KAAK","file":"main.js","sourceRoot":"../../src/server","sourcesContent":["import { GraphQLObjectType, GraphQLString } from \"graphql\";\n\nexport const SubscriptionStatusType = new GraphQLObjectType({\n    name: 'SubscriptionStatusType',\n    fields: () => ({\n        status: {\n            type: GraphQLString\n        }\n    })\n})","import { Controller, PubSubService, Subscribe, Subscription, Type } from '@gapi/core';\nimport { SubscriptionStatusType } from './server.type';\n\n@Controller()\nexport class ServerController {\n\n    constructor(\n        private pubsub: PubSubService\n    ) {\n        let count = 0;\n        setInterval(() => {\n            count++;\n            pubsub.publish('CREATE_SIGNAL_BASIC', `AZ${count}`);\n        }, 2000)\n    }\n\n    @Type(SubscriptionStatusType)\n    @Subscribe((self: ServerController) => self.pubsub.asyncIterator('CREATE_SIGNAL_BASIC'))\n    @Subscription()\n    statusSubscription(message) {\n        return {\n            status: message\n        }\n    }\n\n}","import { Module } from \"@gapi/core\";\nimport { ServerController } from \"./server.controller\";\n\n@Module({\n    controllers: [ServerController]\n})\nexport class ServerModule {}","import { BootstrapFramework } from \"@rxdi/core\";\nimport { ServerModule } from \"./server.module\";\nimport { CoreModule } from \"@gapi/core\";\n\nBootstrapFramework(ServerModule, [CoreModule.forRoot({\n    graphql: {\n        graphiql: true,\n        graphiQlPlayground: false\n    }\n})]).subscribe(\n    () => console.log('Server started'),\n    console.error.bind(console)\n);"]}