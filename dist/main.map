{"version":3,"sources":["core/services/args.service.ts","core/services/config.service.ts","core/services/environment.service.ts","core/services/exec.service.ts","tasks/start.ts","tasks/new.ts","tasks/test.ts","tasks/schema.ts","core/services/readline.service.ts","tasks/deploy.ts","tasks/build.ts","tasks/generate/ui/banner.ts","tasks/generate/ui/emojis.ts","tasks/generate/ui/messages.ts","tasks/generate/ui/index.ts","tasks/generate/runners/abstract.runner.ts","tasks/generate/runners/schematic.runner.ts","tasks/generate/generate.ts","core/services/root.service.ts","main.ts"],"names":[],"mappings":"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","file":"main.map","sourceRoot":"../src","sourcesContent":["import { Service } from 'typedi';\n\n@Service()\nexport class ArgsService {\n    args: string[];\n\n    setArguments(args: string[]) {\n        this.args = args;\n    }\n\n\n}","import { Service } from 'typedi';\n\nexport class MainConfig {\n    API_PORT?: number | string;\n    DB_PORT?: string;\n    DB_HOST?: string;\n    DB_USERNAME?: string;\n    DB_PASSWORD?: string;\n    API_CERT?: string;\n    DB_NAME?: string;\n    TESTS_TOKEN?: string;\n    GRAPHIQL_TOKEN?: string;\n    ENDPOINT_TESTING?: string;\n    NODE_ENV?: string;\n    GAPI_VERSION?: string;\n}\n\nexport class Commands {\n    commands: {\n        docker: {\n            start: string;\n            stop: string;\n            build: string;\n        }\n    };\n    config: {\n        deploy: {\n            app_name: string;\n        },\n        app: {\n            local: MainConfig | string;\n            prod: MainConfig | string;\n        }\n        test: {\n            prod: MainConfig | string;\n            local: MainConfig | string;\n            worker: MainConfig | string;\n        },\n        schema: {\n            introspectionEndpoint: string;\n            introspectionOutputFolder: string;\n            pattern: string;\n        }\n    };\n}\n\nexport class GapiConfig extends Commands {\n    port: string;\n}\n\n@Service()\nexport class ConfigService {\n    config: GapiConfig = new GapiConfig();\n\n    setCustomConfig(config: GapiConfig) {\n        Object.assign(this.config, config);\n        if (!config) {\n            config = <any>{};\n        }\n        if (!config.commands) {\n            config.commands = <any>{};\n        } else {\n            if (config.commands['test']) {\n                this.genericError('test');\n            }\n            if (config.commands['new']) {\n                this.genericError('new');\n            }\n            if (config.commands['schema']) {\n                this.genericError('schema');\n            }\n            if (config.commands['start']) {\n                this.genericError('start');\n            }\n            if (config.commands['stop']) {\n                this.genericError('stop');\n            }\n        }\n        this.config = config;\n        this.config.config = this.config.config || <any>{};\n        this.config.config.schema = this.config.config.schema || {\n            introspectionEndpoint: '',\n            introspectionOutputFolder: '',\n            pattern: ''\n        }\n        this.config.config.app = this.config.config.app || {\n            local: {\n                GAPI_VERSION: ''\n            },\n            prod: {\n                GAPI_VERSION: ''\n            },\n        }\n    }\n\n    genericError(command: string) {\n        throw new Error(`You cannot define command \"${command}\" they are restricted!`);\n    }\n}","import { Service } from 'typedi';\n\n@Service()\nexport class EnvironmentVariableService {\n    setVariables(config) {\n        let buildedEnvironments = ``;\n        const conf = Object.keys(config);\n        let count = 0;\n        conf.forEach((key) => {\n            count++;\n            if (conf.length === count) {\n                buildedEnvironments += `export ${key}=${config[key]}`;\n            } else {\n                buildedEnvironments += `export ${key}=${config[key]} && `;\n            }\n        });\n        return buildedEnvironments;\n    }\n}","import { Service } from 'typedi';\nimport { exec } from 'shelljs';\n\n@Service()\nexport class ExecService {\n    call(command: string, options?) {\n        return new Promise((resolve, reject) => {\n            exec(command, options, (e) => {\n                if (e) {\n                    reject(e);\n                }\n                resolve();\n            });\n        });\n    }\n}","import { Container, Service } from 'typedi';\nimport { ArgsService } from '../core/services/args.service';\nimport { ConfigService, MainConfig } from '../core/services/config.service';\nimport { EnvironmentVariableService } from '../core/services/environment.service';\nimport { ExecService } from '../core/services/exec.service';\nimport { existsSync } from 'fs';\nimport Bundler = require('parcel-bundler');\nimport childProcess = require('child_process');\nimport { rejects } from 'assert';\n\n@Service()\nexport class StartTask {\n\n    private argsService = Container.get(ArgsService);\n    private configService: ConfigService = Container.get(ConfigService);\n    private environmentService: EnvironmentVariableService = Container.get(EnvironmentVariableService);\n    private execService: ExecService = Container.get(ExecService);\n    private config: string;\n    private configOriginal: string | MainConfig;\n    private verbose: string = '';\n    private quiet: boolean = true;\n\n    async run(stop: { state?: boolean } = {}) {\n        if (this.argsService.args.includes('--verbose')) {\n            this.verbose = ' --verbose';\n            this.quiet = false;\n        }\n        this.configService.config.config.app = this.configService.config.config.app || <any>{};\n        if (this.argsService.args[3] && this.argsService.args[3].includes('--')) {\n            const currentConfigKey = this.argsService.args[3].replace('--', '');\n            const currentConfiguration = this.configService.config.config.app[currentConfigKey];\n            if (currentConfiguration && currentConfiguration.prototype && currentConfiguration.prototype === String && currentConfiguration.includes('extends')) {\n                this.config = this.environmentService.setVariables(this.extendConfig(currentConfiguration));\n                this.configOriginal = this.extendConfig(currentConfiguration);\n                console.log(`\"${currentConfigKey}\" configuration loaded!`);\n            } else if (currentConfiguration) {\n                this.config = this.environmentService.setVariables(currentConfiguration);\n                this.configOriginal = currentConfiguration;\n\n            } else {\n                this.config = this.environmentService.setVariables(this.configService.config.config.app.local);\n                this.configOriginal = this.configService.config.config.app.local;\n            }\n            console.log(`\"${currentConfigKey}\" configuration loaded!`);\n        } else {\n            const currentConfiguration = <any>this.configService.config.config.app.local;\n            if (currentConfiguration && currentConfiguration.prototype && currentConfiguration.prototype === String && currentConfiguration.includes('extends')) {\n                this.config = this.environmentService.setVariables(this.extendConfig(currentConfiguration));\n                this.configOriginal = this.extendConfig(currentConfiguration);\n            } else {\n                this.config = this.environmentService.setVariables(this.configService.config.config.app.local);\n                this.configOriginal = this.configService.config.config.app.local;\n            }\n            console.log(`\"local\" configuration loaded!`);\n        }\n        const sleep = process.argv[5] ? `${process.argv[5]} &&` : '';\n        const cwd = process.cwd();\n        const mainExists = existsSync(`${cwd}/src/main.ts`);\n        const customPath = process.argv[4] ? process.argv[4].split('--path=')[1] : null;\n        const customPathExists = existsSync(`${cwd}/${customPath}`);\n        const isLintEnabled = this.argsService.args.toString().includes('--lint');\n        if (this.argsService.args.toString().includes('--docker')) {\n            return await this.execService.call(`${this.config} && pm2-docker ${cwd}/${customPathExists ? customPath : 'process.yml'} --only APP`);\n        } else if (this.argsService.args.toString().includes('--pm2')) {\n            if (!stop.state) {\n                return await this.execService.call(`${this.config} && pm2 stop ${cwd}/${customPathExists ? customPath : 'process.yml'}`);\n            } else {\n                return await this.execService.call(`${this.config} && pm2 start ${cwd}/${customPathExists ? customPath : 'process.yml'} --only APP`);\n            }\n        }\n        if (process.env.DEPLOY_PLATFORM === 'heroku') {\n            if (customPathExists) {\n                return await this.execService.call(`${sleep} ts-node ${cwd}/${customPathExists ? customPath : 'index.ts'}`);\n            } else {\n                return await this.execService.call(`${sleep} ts-node ${cwd}/src/main.ts`);\n            }\n        } else {\n            if (process.argv.toString().includes('--parcel')) {\n                return this.prepareBundler(`${customPathExists ? `${cwd}/${customPathExists ? customPath : 'index.ts'}` : `${cwd}/src/main.ts`}`, this.configService.config.config.app.local, true, false);\n            } else {\n                return await this.execService.call(`nodemon --watch '${cwd}/src/**/*.ts' ${this.quiet ? '--quiet' : ''}  --ignore '${this.configService.config.config.schema.introspectionOutputFolder}/' --ignore '${cwd}/src/**/*.spec.ts' --exec '${this.config} && ${isLintEnabled ? 'npm run lint &&' : ''} ${sleep} ts-node' ${customPathExists ? `${cwd}/${customPathExists ? customPath : 'index.ts'}` : `${cwd}/src/main.ts`}  ${this.verbose}`);\n            }\n        }\n    }\n\n    async prepareBundler(\n        file,\n        argv,\n        start = process.argv.toString().includes('--start'),\n        buildOnly: boolean = process.argv.toString().includes('--buildOnly=false') ? false : true,\n        minify: boolean = process.argv.toString().includes('--minify=false') ? false : true,\n        target: 'browser' | 'node' = process.argv.toString().includes('--target=browser') ? 'browser' : 'node'\n    ) {\n\n        const bundler = new Bundler(file, {\n            target,\n            minify,\n            bundleNodeModules: process.argv.toString().includes('--bundle-modules')\n        });\n\n        let bundle = null;\n        let child = null;\n\n        bundler.on('bundled', (compiledBundle) => bundle = compiledBundle);\n        bundler.on('buildEnd', () => {\n            if (buildOnly) {\n                process.stdout.write(`Gapi Application build finished! ${file}\\n`);\n                process.stdout.write(`Bundle source: ${bundle.name}`);\n                process.exit(0);\n            }\n            if (start && bundle !== null) {\n                if (child) {\n                    child.stdout.removeAllListeners('data');\n                    child.stderr.removeAllListeners('data');\n                    child.removeAllListeners('exit');\n                    child.kill();\n                }\n                process.env = Object.assign(process.env, argv);\n                child = childProcess.spawn('node', [bundle.name]);\n                child.stdout.on('data', (data) => process.stdout.write(data));\n                child.stderr.on('data', (data) => process.stdout.write(data));\n                child.on('exit', (code) => {\n                    console.log(`Child process exited with code ${code}`);\n                    child = null;\n                });\n            }\n            bundle = null;\n        });\n        bundler.bundle();\n    }\n\n    extendConfig(config) {\n        const splitted = config.split(' ');\n        const argum = splitted[1].split('/');\n        const extendedConfiguration = this.configService.config.config[argum[0]][argum[1]];\n        if (!extendedConfiguration) {\n            throw new Error(`Cannot extend current configuration ${config}`);\n        }\n        return extendedConfiguration;\n    }\n}","import { Service, Container } from 'typedi';\nimport { ArgsService } from '../core/services/args.service';\nimport { ExecService } from '../core/services/exec.service';\n\n@Service()\nexport class NewTask {\n\n    private execService: ExecService = Container.get(ExecService);\n    private argsService: ArgsService = Container.get(ArgsService);\n    private repoLinks = {\n        basic: 'https://github.com/Stradivario/gapi-starter',\n        advanced: 'https://github.com/Stradivario/gapi-starter-postgres-sequelize',\n        microservices: 'https://github.com/Stradivario/gapi-starter-microservices',\n        serverless: 'https://github.com/Stradivario/gapi-starter-serverless',\n        serverlessSequelize: 'https://github.com/Stradivario/gapi-starter-serverless-sequelize',\n        rxdiServer: 'https://github.com/rxdi/starter-server-side',\n        rxdiClient: 'https://github.com/rxdi/starter-client-side',\n        rxdiClientAdvanced: 'https://github.com/rxdi/starter-client-side-advanced',\n        rxdiNeoTypescript: 'https://github.com/rxdi/starter-neo4j-typescript',\n        rxdiNeoJavascript: 'https://github.com/rxdi/starter-neo4j-javascript',\n        rxdiNeoComplex: 'https://github.com/rxdi/starter-neo4j-typescript-complex',\n        \n    };\n\n    async run() {\n        if (this.argsService.args.toString().includes('--advanced')) {\n            await this.exec(this.repoLinks.advanced);\n        } else if (this.argsService.args.toString().includes('--microservices')) {\n            await this.exec(this.repoLinks.microservices);\n        } else if (this.argsService.args.toString().includes('--serverless-sequelize')) {\n            await this.exec(this.repoLinks.serverlessSequelize);\n        } else if (this.argsService.args.toString().includes('--serverless')) {\n            await this.exec(this.repoLinks.serverless);\n        } else if (this.argsService.args.toString().includes('--rxdi-server')) {\n            await this.exec(this.repoLinks.rxdiServer);\n        } else if (this.argsService.args.toString().includes('--rxdi-client')) {\n            await this.exec(this.repoLinks.rxdiClient);\n        } else if (this.argsService.args.toString().includes('--rxdi-client-advanced')) {\n            await this.exec(this.repoLinks.rxdiClientAdvanced);\n        } else if (this.argsService.args.toString().includes('--neo4j-typescript')) {\n            await this.exec(this.repoLinks.rxdiNeoTypescript);\n        } else if (this.argsService.args.toString().includes('--neo4j-javascript')) {\n            await this.exec(this.repoLinks.rxdiNeoJavascript);\n        } else if (this.argsService.args.toString().includes('--neo4j-complex')) {\n            await this.exec(this.repoLinks.rxdiNeoComplex);\n        } else {\n            await this.exec(this.repoLinks.basic, 'echo basic example uses ts-node and @gapi/cli installed internally because of Heroku easy deployment button. To uninstall ts-node and @gapi/cli type \"npm uninstall ts-node @gapi/cli\"');\n        }\n    }\n\n    async exec(repoLink: string, args = '') {\n        await this.execService.call(`git clone ${repoLink} ${process.argv[3]} && cd ./${process.argv[3]} && npm install ${args ? `&& ${args}` : ''}`);\n    }\n\n}","import { Container, Service } from 'typedi';\nimport { ArgsService } from '../core/services/args.service';\nimport { ConfigService } from '../core/services/config.service';\nimport { StartTask } from './start';\nimport { ExecService } from '../core/services/exec.service';\nimport { EnvironmentVariableService } from '../core/services/environment.service';\n\n@Service()\nexport class TestTask {\n\n    private execService: ExecService = Container.get(ExecService);\n    private argsService: ArgsService = Container.get(ArgsService);\n    private configService: ConfigService = Container.get(ConfigService);\n    private environmentService: EnvironmentVariableService = Container.get(EnvironmentVariableService);\n    private args: string;\n    private config: string = ``;\n    private verbose: string = '';\n\n    async run() {\n        this.args = this.argsService.args.toString();\n        this.setConfig();\n        this.setSleep();\n        if (this.args.includes('--verbose')) {\n            this.verbose = ' --verbose';\n        }\n        console.log(this.config);\n        if (this.args.includes('--before')) {\n            this.config += `&& export BEFORE_HOOK=true`;\n            try {\n                await this.execService.call(`${this.config} && ts-node ${process.cwd()}/src/test.ts`);\n            } catch (e) {\n                console.error(`ERROR: Terminal exited with STATUS ${e} tests will not be runned check ${process.argv[4] ? process.argv[4] : '/src/test.ts'}, appropriate exit code is 0`);\n                process.exit(1);\n            }\n            await this.execService.call(`${this.config} && jest`);\n            console.log('SUCCESS');\n        } else {\n            if (this.args.includes('--watch')) {\n                try {\n                    await this.execService.call(`nodemon --watch '${process.cwd()}/src/**/*.ts' --ignore '${this.configService.config.config.schema.introspectionOutputFolder}/' --exec '${this.config} && npm run lint && jest' ${this.verbose}`, { async: true });\n                    // this.startTask.run();\n                    // await execService.call(`${this.config} && jest --watchAll`);\n                } catch (e) {\n                    process.exit(1);\n                }\n            } else {\n                try {\n                    await this.execService.call(`${this.config} && npm run lint && jest`);\n                } catch (e) {\n                    return process.exit(1);\n                }\n            }\n            console.log('SUCCESS');\n        }\n\n    }\n\n    setSleep() {\n        this.config += `&& sleep 0`;\n    }\n\n\n    setConfig() {\n        if (this.argsService.args[3]) {\n            const currentConfigKey = this.argsService.args[3].replace('--', '');\n            const currentConfiguration = this.configService.config.config.test[currentConfigKey];\n            if (currentConfiguration) {\n                this.extendOrDefault(currentConfiguration);\n                console.log(`\"${currentConfigKey}\" configuration loaded!`);\n            } else {\n                if (currentConfigKey !== 'watch' && currentConfigKey !== 'before') {\n                    console.log(`Missing \"${currentConfigKey}\" argument configuration inside gapi-cli.conf.yml > config > test switching to \"local\" configuration.`);\n                }\n                this.extendOrDefault(this.configService.config.config.test.local);\n            }\n        } else {\n            this.extendOrDefault(this.configService.config.config.test.local);\n        }\n    }\n\n    extendOrDefault(currentConfiguration) {\n        if (currentConfiguration.constructor === String && currentConfiguration.includes('extends')) {\n            this.config = this.environmentService.setVariables(this.extendConfig(currentConfiguration));\n        } else {\n            this.config = this.environmentService.setVariables(currentConfiguration);\n        }\n    }\n\n    extendConfig(config) {\n        const splitted = config.split(' ');\n        const argum = splitted[1].split('/');\n        const extendedConfiguration = this.configService.config.config[argum[0]][argum[1]];\n        if (!extendedConfiguration) {\n            throw new Error(`Cannot extend current configuration ${config}`);\n        }\n        return extendedConfiguration;\n    }\n    validateConfig(key: string) {\n        if (!this.configService.config.config.test[key]) {\n            throw new Error('Missing test config inside gapi-cli.conf.yml');\n        }\n        if (!this.configService.config.config.test[key].db_host) {\n            throw new Error('Missing variable db_host inside gapi-cli.conf.yml');\n        }\n\n        if (!this.configService.config.config.test[key].db_name) {\n            throw new Error('Missing variable db_name inside gapi-cli.conf.yml');\n        }\n\n        if (!this.configService.config.config.test[key].db_pass) {\n            throw new Error('Missing variable db_password inside gapi-cli.conf.yml');\n        }\n\n        if (!this.configService.config.config.test[key].db_port) {\n            throw new Error('Missing variable db_port inside gapi-cli.conf.yml');\n        }\n\n        if (!this.configService.config.config.test[key].db_user) {\n            throw new Error('Missing variable db_user inside gapi-cli.conf.yml');\n        }\n\n        if (!this.configService.config.config.test[key].endpoint) {\n            throw new Error('Missing variable endpoint inside gapi-cli.conf.yml');\n        }\n\n        if (!this.configService.config.config.test[key].token) {\n            throw new Error('Missing variable token inside gapi-cli.conf.yml');\n        }\n    }\n\n}","import { Service, Container } from 'typedi';\nimport { ArgsService } from '../core/services/args.service';\nimport { ExecService } from '../core/services/exec.service';\nimport { ConfigService } from '../core/services/config.service';\nimport {\n  existsSync,\n  mkdirSync,\n  readFileSync,\n  writeFileSync,\n  unlink,\n  unlinkSync\n} from 'fs';\n\n@Service()\nexport class SchemaTask {\n  private folder: string;\n  private endpoint: string;\n  private node_modules: string;\n  private bashFolder: string;\n  private pattern: string;\n  private execService: ExecService = Container.get(ExecService);\n  private argsService: ArgsService = Container.get(ArgsService);\n  private configService: ConfigService = Container.get(ConfigService);\n\n  async run() {\n    this.folder = this.configService.config.config.schema.introspectionOutputFolder;\n    this.endpoint = this.configService.config.config.schema.introspectionEndpoint;\n    this.pattern = this.configService.config.config.schema.pattern;\n    this.node_modules = __dirname.replace('tasks', 'node_modules');\n    this.bashFolder = __dirname.replace('tasks', 'bash');\n\n    if (process.argv[3] === 'introspect') {\n      this.createDir();\n      await this.generateSchema();\n      console.log(\n        `Typings introspection based on GAPI Schema created inside folder: ${\n          this.folder\n        }/index.d.ts`\n      );\n    }\n\n    if (\n      process.argv[3] === 'collect' ||\n      this.argsService.args.includes('--collect-documents')\n    ) {\n      this.createDir();\n      await this.collectQueries();\n      console.log(\n        `Schema documents created inside folder: ${this.folder}/documents.json`\n      );\n    }\n    console.log(\n      `To change export folder for this command you need to check this link https://github.com/Stradivario/gapi-cli/wiki/schema`\n    );\n  }\n  private createDir() {\n    if (!existsSync(this.folder)) {\n      mkdirSync(this.folder);\n    }\n  }\n  public async collectQueries() {\n    await this.execService.call(\n      `node ${\n        this.node_modules\n      }/graphql-document-collector/bin/graphql-document-collector '${\n        this.pattern ? this.pattern : '**/*.graphql'\n      }' > ${this.folder}/documents-temp.json`\n    );\n    const readDocumentsTemp = readFileSync(\n      `${this.folder}/documents-temp.json`,\n      'utf-8'\n    );\n    if (this.argsService.args.includes('--collect-types')) {\n      this.generateTypes(readDocumentsTemp);\n    }\n    const parsedDocuments = `/* tslint:disable */ \\n export const DOCUMENTS = ${readDocumentsTemp}`;\n    writeFileSync(`${this.folder}/documents.ts`, parsedDocuments, 'utf8');\n    unlinkSync(`${this.folder}/documents-temp.json`);\n  }\n\n  public async generateSchema() {\n    await this.execService.call(\n      `export NODE_TLS_REJECT_UNAUTHORIZED=0 && node ${\n        this.node_modules\n      }/apollo-codegen/lib/cli.js introspect-schema ${this.endpoint} --output ${\n        this.folder\n      }/schema.json`,\n      { async: true }\n    );\n    await this.execService.call(\n      `export NODE_TLS_REJECT_UNAUTHORIZED=0 && node  ${\n        this.bashFolder\n      }/gql2ts/index.js ${this.folder}/schema.json -o ${this.folder}/index.ts`,\n      { async: true }\n    );\n  }\n\n  public async generateTypes(readDocumentsTemp) {\n\n    const savedDocuments = [];\n    Object.keys(JSON.parse(readDocumentsTemp)).forEach(key => {\n      const n = key.lastIndexOf('/');\n      const result = key.substring(n + 1);\n      if (result === 'ListMovies.graphql') {\n        return;\n      }\n      if (result === 'Place.graphql') {\n        return;\n      }\n      if (result === 'Movie.graphql') {\n        return;\n      }\n      savedDocuments.push(result);\n    });\n\n    const types = `\nfunction strEnum<T extends string>(o: Array<T>): {[K in T]: K} {\n    return o.reduce((res, key) => {\n        res[key] = key;\n        return res;\n    }, Object.create(null));\n}\nexport const DocumentTypes = strEnum(${JSON.stringify(savedDocuments).replace(/\"/g, `'`).replace(/,/g, ',\\n')});\nexport type DocumentTypes = keyof typeof DocumentTypes;`;\n    writeFileSync(`${this.folder}/documentTypes.ts`, types, 'utf8');\n  }\n}\n","import { Service } from 'typedi';\nimport { createInterface, ReadLine, clearScreenDown } from 'readline';\n\n@Service()\nexport class ReadlineService {\n    readline: ReadLine;\n    private createReadlineInterface() {\n        return createInterface({\n            input: process.stdin,\n            output: process.stdout\n        });\n    }\n    async clearScreenDown() {\n        return clearScreenDown(process.stdin);\n    }\n    async createQuestion<T>(question: string, task: Function) {\n        return new Promise((resolve) => {\n            this.readline = this.createReadlineInterface();\n            this.readline.question(question, (answer) => {\n                try {\n                    task(answer);\n                } catch (e) {\n                    console.error('Missing question internal library error!');\n                }\n                this.readline.close();\n                resolve();\n            });\n        });\n    }\n}","#! /usr/bin/env node\nimport { Service, Container } from 'typedi';\nimport { ArgsService } from '../core/services/args.service';\nimport { ExecService } from '../core/services/exec.service';\nimport { ConfigService } from '../core/services/config.service';\nimport { ReadlineService } from '../core/services/readline.service';\n\nconst chalk = require('chalk');\nconst Spinner = require('cli-spinner').Spinner;\n\nfunction strEnum<T extends string>(o: Array<T>): {[K in T]: K} {\n    return o.reduce((res, key) => {\n        res[key] = key;\n        return res;\n    }, Object.create(null));\n}\n\nexport const QuestionsType = strEnum([\n    'username',\n    'password',\n    'project'\n]);\nexport type QuestionsType = keyof typeof QuestionsType;\n\n\nclass UserConfig {\n    username: string;\n    password: string;\n    project: string;\n}\n\nexport interface Questions {\n    passwordQuestion(): void;\n    projectQuestion(): void;\n    usernameQuestion(): void;\n}\nexport interface Tasks {\n    usernameTask(username: string): void;\n    projectTask(name: string): void;\n    passwordTask(password: string): void;\n\n}\n\n@Service()\nexport class DeployTask implements Tasks, Questions {\n\n    private readlineService: ReadlineService = Container.get(ReadlineService);\n    private deploy_config: UserConfig = new UserConfig();\n\n    spinner = new Spinner();\n    async run() {\n        this.spinner.setSpinnerString(17);\n        try {\n            await this.usernameQuestion();\n            await this.passwordQuestion();\n            await this.projectQuestion();\n            console.log('Deploy Success!');\n        } catch (e) {\n            console.log('Deploy Error!');\n        }\n        process.exit(0);\n    }\n\n    async passwordQuestion() {\n        await this.readlineService.createQuestion('Password: ', this.passwordTask.bind(this));\n        await this.validateUserConfig(QuestionsType.password);\n    }\n\n    async projectQuestion() {\n        await this.readlineService.createQuestion('Project name: ', this.projectTask.bind(this));\n        await this.validateUserConfig(QuestionsType.project);\n    }\n\n    async usernameQuestion() {\n        await this.readlineService.createQuestion('Username: ', this.usernameTask.bind(this));\n        await this.validateUserConfig(QuestionsType.username);\n    }\n\n\n    usernameTask(username: string) {\n        this.deploy_config.username = username;\n    }\n\n    projectTask(name: string) {\n        this.deploy_config.project = name;\n    }\n\n    passwordTask(password: string) {\n        this.deploy_config.password = password;\n    }\n\n    async validateUserConfig(question: QuestionsType) {\n        process.stdout.write(`\\x1B[2J`);\n        process.stdout.write(`Current configuration: ${JSON.stringify(this.deploy_config, null, 4)} \\n\\n\\n\\n\\n`);\n        if (!this.deploy_config[question]) {\n            console.log(chalk.red(`Missing ${question} please fill your ${question}!`));\n            await this[`${question}Question`]();\n            await this.validateUserConfig(question);\n        }\n    }\n\n\n}","#! /usr/bin/env node\nimport { Container, Service } from 'typedi';\nimport { ConfigService, MainConfig } from '../core/services/config.service';\nimport { existsSync } from 'fs';\nimport { StartTask } from './start';\n\n@Service()\nexport class BuildTask {\n\n    private startTask = Container.get(StartTask);\n    private configService: ConfigService = Container.get(ConfigService);\n\n    async run() {\n        const cwd = process.cwd();\n        const customPath = process.argv[4] ? process.argv[4].split('--path=')[1] : null;\n        const customPathExists = existsSync(`${cwd}/${customPath}`);\n        console.log(this.configService.config.config.app.local);\n        this.startTask.prepareBundler(`${customPathExists ? `${cwd}/${customPathExists ? customPath : 'index.ts'}` : `${cwd}/src/main.ts`}`, this.configService.config.config.app.local);\n    }\n\n}","export const BANNER = `\n _   _             _      ___  _____  _____  _     _____\n| \\\\ | |           | |    |_  |/  ___|/  __ \\\\| |   |_   _|\n|  \\\\| |  ___  ___ | |_     | |\\\\ \\`--. | /  \\\\/| |     | |\n| . \\` | / _ \\\\/ __|| __|    | | \\`--. \\\\| |    | |     | |\n| |\\\\  ||  __/\\\\__ \\\\| |_ /\\\\__/ //\\\\__/ /| \\\\__/\\\\| |_____| |_\n\\\\_| \\\\_/ \\\\___||___/ \\\\__|\\\\____/ \\\\____/  \\\\____/\\\\_____/\\\\___/\n\n`;\n","import { get } from 'node-emoji';\n\nexport const emojis = {\n  HEART: get('heart'),\n  COFFEE: get('coffee'),\n  BEER: get('beer'),\n  BROKEN_HEART: get('broken_heart'),\n  CRYING: get('crying_cat_face'),\n  HEART_EYES: get('heart_eyes_cat'),\n  JOY: get('joy_cat'),\n  KISSING: get('kissing_cat'),\n  SCREAM: get('scream_cat'),\n  ROCKET: get('rocket'),\n  SMIRK: get('smirk_cat'),\n  RAISED_HANDS: get('raised_hands'),\n  POINT_RIGHT: get('point_right'),\n  ZAP: get('zap'),\n  BOOM: get('boom'),\n  PRAY: get('pray'),\n  WINE: get('wine_glass'),\n};\n","import chalk from 'chalk';\nimport { emojis } from './emojis';\n\nexport const messages = {\n  DRY_RUN_MODE: 'Command has been executed in the dry mode, nothing changed!',\n  PROJECT_INFORMATION_START: `${\n    emojis.ZAP\n  }  We will scaffold your app in a few seconds..`,\n  RUNNER_EXECUTION_ERROR: (command: string) =>\n    `Failed to execute command: ${command}`,\n  PACKAGE_MANAGER_QUESTION: `Which package manager would you ${\n    emojis.HEART\n  }  to use?`,\n  PACKAGE_MANAGER_INSTALLATION_IN_PROGRESS: `Installation in progress... ${\n    emojis.COFFEE\n  }`,\n  PACKAGE_MANAGER_UPDATE_IN_PROGRESS: `Installation in progress... ${\n    emojis.COFFEE\n  }`,\n  PACKAGE_MANAGER_UPGRADE_IN_PROGRESS: `Installation in progress... ${\n    emojis.COFFEE\n  }`,\n  GIT_INITIALIZATION_ERROR: 'Git repository has not been initialized',\n  PACKAGE_MANAGER_INSTALLATION_SUCCEED: (name: string) =>\n    `${emojis.ROCKET}  Successfully created project ${chalk.green(name)}`,\n  GET_STARTED_INFORMATION: `${\n    emojis.POINT_RIGHT\n  }  Get started with the following commands:`,\n  CHANGE_DIR_COMMAND: (name: string) => `$ cd ${name}`,\n  START_COMMAND: (name: string) => `$ ${name} run start`,\n  PACKAGE_MANAGER_INSTALLATION_FAILED: `${\n    emojis.SCREAM\n  }  Packages installation failed, see above`,\n  NEST_INFORMATION_PACKAGE_MANAGER_FAILED: `${\n    emojis.SMIRK\n  }  cannot read your project package.json file, are you inside your project directory?`,\n};\n","export * from './banner';\nexport * from './emojis';\nexport * from './messages';\n","import chalk from 'chalk';\nimport { ChildProcess, spawn, SpawnOptions } from 'child_process';\nimport { messages } from '../ui';\n\nexport class AbstractRunner {\n  constructor(protected binary: string) {}\n\n  public async run(\n    command: string,\n    collect: boolean = false,\n    cwd: string = process.cwd(),\n  ): Promise<null | string> {\n    const args: string[] = [command];\n    const options: SpawnOptions = {\n      cwd,\n      stdio: collect ? 'pipe' : 'inherit',\n      shell: true,\n    };\n    return new Promise<null | string>((resolve, reject) => {\n      const child: ChildProcess = spawn(`${this.binary}`, args, options);\n      if (collect) {\n        child.stdout!.on('data', data =>\n          resolve(data.toString().replace(/\\r\\n|\\n/, '')),\n        );\n      }\n      child.on('close', code => {\n        if (code === 0) {\n          resolve(null);\n        } else {\n          console.error(\n            chalk.red(\n              messages.RUNNER_EXECUTION_ERROR(`${this.binary} ${command}`),\n            ),\n          );\n          reject();\n        }\n      });\n    });\n  }\n}\n","import { join } from 'path';\nimport { AbstractRunner } from './abstract.runner';\n\nexport class SchematicRunner extends AbstractRunner {\n  constructor() {\n    super(`\"${join(__dirname, '../../../..', 'node_modules/.bin/schematics')}\"`);\n  }\n}\n","#! /usr/bin/env node\nimport { Service, Container } from 'typedi';\nimport { ArgsService } from '../../core/services/args.service';\nimport { ExecService } from '../../core/services/exec.service';\nimport { SchematicRunner } from './runners/schematic.runner';\n\n@Service()\nexport class GenerateTask {\n  private execService: ExecService = Container.get(ExecService);\n  private argsService: ArgsService = Container.get(ArgsService);\n\n  async run() {\n    this.argsService.args.toString().includes('--advanced');\n    var args = process.argv.slice(3);\n    let method = '';\n    let hasSpec = false;\n    if (args[0] === 'c' || args[0] === 'controller') {\n      method = 'controller';\n      hasSpec = true;\n    }\n    if (args[0] === 's' || args[0] === 'service') {\n      method = 'service';\n      hasSpec = true;\n    }\n\n    if (args[0] === 'm' || args[0] === 'module') {\n      method = 'module';\n    }\n\n    if (args[0] === 't' || args[0] === 'type') {\n      method = 'type';\n    }\n\n    if (args[0] === 'p' || args[0] === 'provider') {\n      method = 'provider';\n    }\n\n    if (args[0] === 's' || args[0] === 'service') {\n      method = 'service';\n    }\n\n    if (args[0] === 'g' || args[0] === 'guard') {\n      method = 'guard';\n    }\n\n    if (args[0] === 'i' || args[0] === 'interceptor') {\n      method = 'interceptor';\n    }\n    if (args[0] === 'e' || args[0] === 'effect') {\n      method = 'effect';\n    }\n\n    if (args[0] === 'e' || args[0] === 'effect') {\n      method = 'effect';\n    }\n    if (!method) {\n      throw new Error('Method not specified');\n    }\n\n    try {\n      await new SchematicRunner().run(\n        `@rxdi/schematics:${method} --name=${args[1]} ${\n          hasSpec ? '--spec' : ''\n        } --language='ts' --sourceRoot='src'`\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async exec(repoLink: string, args = '') {\n    await this.execService.call(\n      `git clone ${repoLink} ${process.argv[3]} && cd ./${\n        process.argv[3]\n      } && npm install ${args ? `&& ${args}` : ''}`\n    );\n  }\n}\n","import { Container, Service } from 'typedi';\nimport { exec } from 'shelljs';\nimport { StartTask } from '../../tasks/start';\nimport { ArgsService } from '../services/args.service';\nimport { NewTask } from '../../tasks/new';\nimport { ConfigService } from './config.service';\nimport { TestTask } from '../../tasks/test';\nimport { SchemaTask } from '../../tasks/schema';\nimport { DeployTask } from '../../tasks/deploy';\nimport { BuildTask } from '../../tasks/build';\nimport { GenerateTask } from '../../tasks/generate/generate';\n\nconst argsService: ArgsService = Container.get(ArgsService);\n\n@Service()\nexport class RootService {\n\n    private startTask: StartTask = Container.get(StartTask);\n    private newTask: NewTask = Container.get(NewTask);\n    private testTask: TestTask = Container.get(TestTask);\n    private configService: ConfigService = Container.get(ConfigService);\n    private schemaTask: SchemaTask = Container.get(SchemaTask);\n    private deployTask: DeployTask = Container.get(DeployTask);\n    private buildTask: BuildTask = Container.get(BuildTask);\n    private generateTask: GenerateTask = Container.get(GenerateTask);\n\n    checkForCustomTasks(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const commands = this.configService.config.commands;\n            const filteredCommands = Object.keys(commands)\n                .filter(cmd => {\n                    if (cmd === argsService.args[2]) {\n                        if (commands[cmd][argsService.args[3]]) {\n                            if (commands[cmd][argsService.args[3]].constructor === Array) {\n                                let count = 0;\n                                const commandsArray = commands[cmd][argsService.args[3]];\n                                const commandsToExecute = commandsArray.map((res) =>  {\n                                    count++;\n                                    let item;\n                                    if (count === commandsArray.length) {\n                                        return item = res;\n                                    } else {\n                                        return res + ' && ';\n                                    }\n                                });\n                                const finalCommand = commandsToExecute.toString().replace(/[, ]+/g, ' ').trim();\n                                resolve(exec(finalCommand));\n                            } else {\n                                resolve(exec(commands[cmd][argsService.args[3]]));\n                            }\n                            return true;\n                        } else {\n                            reject(`Missing custom command ${argsService.args[3]}`);\n                        }\n                    }\n                });\n            if (!filteredCommands.length) {\n                reject('There are no tasks related with your command!');\n            }\n        });\n    }\n\n    async runTask() {\n\n        if (argsService.args[2] === 'stop') {\n            return await this.startTask.run({ state: false });\n        }\n\n        if (argsService.args[2] === 'start') {\n            return await this.startTask.run({ state: true });\n        }\n\n        if (argsService.args[2] === 'build') {\n            return await this.buildTask.run();\n        }\n\n        if (argsService.args[2] === 'new') {\n            return await this.newTask.run();\n        }\n\n        if (argsService.args[2] === 'test') {\n            return await this.testTask.run();\n        }\n\n        if (argsService.args[2] === 'schema') {\n            return await this.schemaTask.run();\n        }\n\n        if (argsService.args[2] === 'deploy') {\n            return await this.deployTask.run();\n        }\n\n        if (argsService.args[2] === 'generate' || argsService.args[2] === 'g') {\n            return await this.generateTask.run();\n        }\n\n        try {\n            await this.checkForCustomTasks();\n        } catch (e) {\n            console.error(e);\n        }\n\n    }\n\n}","#! /usr/bin/env node\nimport { Container } from 'typedi';\nimport { RootService } from './core/services/root.service';\nimport { ArgsService } from './core/services/args.service';\nimport { ConfigService, GapiConfig } from './core/services/config.service';\nimport { load } from 'yamljs';\nimport chalk = require('chalk');\nimport * as figlet from 'figlet';\n\nconst rootService = Container.get(RootService);\nconst argsService = Container.get(ArgsService);\nconst configService = Container.get(ConfigService);\nlet config: any = {};\ntry {\n    config = load('gapi-cli.conf.yml');\n} catch (e) {\n    console.error('Missing gapi-cli.conf.yml gapi-cli will be with malfunctioning.');\n}\nconfigService.setCustomConfig(config);\nargsService.setArguments(process.argv);\nrootService.runTask()\n.then()\n.catch(e => console.error(e));\nconsole.log(chalk.default.yellow(\n    figlet.textSync('Gapi', { horizontalLayout: 'full' })\n  ));"]}