{"version":3,"sources":["core/services/list.service.ts","types/server-metadata.type.ts","types/link-list.type.ts","api-introspection/index.ts","core/services/child.service.ts","core/services/daemon.service.ts","core/interceptors/notify.interceptor.ts","server.controller.ts","core/core.module.ts","server.module.ts","core/services/plugin-loader.service.ts","main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,MAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AAIA,IAAa,WAAW,GAAxB,MAAa,WAAb,CAAwB;AADxB,EAAA,WAAA,GAAA;AAEU,SAAA,UAAA,GAA8B,EAA9B;AACA,SAAA,UAAA,GAAqB,GAAG,IAAA,CAAA,OAAA,EAAS,QAAjC;AACA,SAAA,YAAA,GAAuB,GAAG,KAAK,UAAU,SAAzC;AACA,SAAA,eAAA,GAA0B,GAAG,KAAK,YAAY,eAA9C;AA2BT;;AAzBO,EAAA,QAAQ,GAAA;;AACZ,UAAI;AACF,aAAK,UAAL,GAAkB,IAAI,CAAC,KAAL,EAChB,MAAM,MAAA,CAAA,SAAA,CAAU,IAAA,CAAA,QAAV,EAAoB,KAAK,eAAzB,EAA0C;AAC9C,UAAA,QAAQ,EAAE;AADoC,SAA1C,CADU,EAAlB;AAKD,OAND,CAME,OAAO,CAAP,EAAU,CAAE;;AACd,aAAO,KAAK,UAAZ;AACD;AAAA;;AAEK,EAAA,cAAc,CAAC,QAAD,EAAiB;;AACnC,aAAO,CAAC,MAAM,KAAK,QAAL,EAAP,EAAwB,MAAxB,CAA+B,CAAC,IAAI,CAAC,CAAC,QAAF,KAAe,QAAnD,CAAP;AACD;AAAA;;AAED,EAAA,cAAc,CAAC,QAAD,EAAiB;AAC7B,WAAO;AACL,MAAA,OAAO,EAAE,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClB,eAAA,CAAC,MAAM,KAAK,QAAL,EAAP,EAAwB,MAAxB,CAA+B,CAAC,IAAI,CAAC,CAAC,QAAF,KAAe,QAAnD,CAAA;AAA4D,OAD1C,CADf;AAGL,MAAA,OAAO,EAAS,SAAP,IAA4B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnC,eAAA,CAAC,MAAM,KAAK,QAAL,EAAP,EAAwB,MAAxB,CACE,CAAC,IAAI,CAAC,CAAC,QAAF,KAAe,QAAf,IAA2B,CAAC,CAAC,QAAF,KAAe,SADjD,CAAA;OADmC;AAHhC,KAAP;AAQD;;AA9BqB,CAAxB;AAAa,WAAW,GAAA,UAAA,CAAA,CADvB,MAAA,CAAA,UAAA,EACuB,CAAA,EAAX,WAAW,CAAX;AAAA,OAAA,CAAA,WAAA,GAAA,WAAA;;;;;;;;ACPb,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEa,OAAA,CAAA,kBAAA,GAAqB,IAAI,SAAA,CAAA,iBAAJ,CAAsB;AACtD,EAAA,IAAI,EAAE,oBADgD;AAEtD,EAAA,MAAM,EAAE,OAAO;AACb,IAAA,IAAI,EAAE;AACJ,MAAA,IAAI,EAAE,SAAA,CAAA;AADF;AADO,GAAP;AAF8C,CAAtB,CAArB;AASA,OAAA,CAAA,uBAAA,GAA0B,IAAI,SAAA,CAAA,sBAAJ,CAA2B;AAChE,EAAA,IAAI,EAAE,yBAD0D;AAEhE,EAAA,MAAM,EAAE,OAAO;AACb,IAAA,IAAI,EAAE;AACJ,MAAA,IAAI,EAAE,SAAA,CAAA;AADF;AADO,GAAP;AAFwD,CAA3B,CAA1B;;;;;;;;ACXb,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEa,OAAA,CAAA,YAAA,GAAe,IAAI,SAAA,CAAA,iBAAJ,CAAsB;AAChD,EAAA,IAAI,EAAE,cAD0C;AAEhD,EAAA,MAAM,EAAE,OAAO;AACb,IAAA,QAAQ,EAAE;AACR,MAAA,IAAI,EAAE,SAAA,CAAA;AADE,KADG;AAIb,IAAA,iBAAiB,EAAE;AACjB,MAAA,IAAI,EAAE,SAAA,CAAA;AADW,KAJN;AAOb,IAAA,QAAQ,EAAE;AACR,MAAA,IAAI,EAAE,SAAA,CAAA;AADE,KAPG;AAUb,IAAA,cAAc,EAAE;AACd,MAAA,IAAI,EAAE,sBAAA,CAAA;AADQ;AAVH,GAAP;AAFwC,CAAtB,CAAf;;cCHb;AACA;;;;IAuEA;;;;;;;;;;;;;;;;ACxEA,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGA,IAAa,YAAY,GAAzB,MAAa,YAAb,CAAyB;AACvB,EAAA,KAAK,CACH,OADG,EAEH,IAFG,EAGH,GAHG,EAIH,IAAA,GAAe,KAAK,IAJjB,EAIqB;AAExB,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,YAAM,KAAK,GAAG,eAAA,CAAA,KAAA,CAAM,OAAN,EAAe,IAAf,EAAqB;AAAE,QAAA,GAAF;AAAO,QAAA,QAAQ,EAAE;AAAjB,OAArB,CAAd;AACA,YAAM,OAAO,GAAG,UAAU,CAAC,MAAK;AAC9B,cAAM,OAAO,GAAG,GAAG,OAAO,IAAI,IAAI,CAAC,QAAL,EAAe,8BAA8B,IAAI,GAC7E,IAAI,UADN;AAEA,QAAA,KAAK,CAAC,IAAN,CAAW,OAAX;AACA,QAAA,MAAM,CAAC,OAAD,CAAN;AACA,QAAA,YAAY,CAAC,OAAD,CAAZ;AACD,OANyB,EAMvB,IANuB,CAA1B;AAOA,MAAA,KAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,IAAI,IAAI,OAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,IAArB,CAAhC;AACA,MAAA,KAAK,CAAC,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,IAAI,IAAI,OAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,IAArB,CAAhC;AACA,MAAA,KAAK,CAAC,EAAN,CAAS,OAAT,EAAkB,IAAI,IAAG;AACvB,QAAA,YAAY,CAAC,OAAD,CAAZ;;AACA,YAAI,CAAC,IAAL,EAAW;AACT,UAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAFD,MAEO;AACL,UAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OAPD;AAQD,KAnBM,CAAP;AAoBD;;AA3BsB,CAAzB;AAAa,YAAY,GAAA,UAAA,CAAA,CADxB,MAAA,CAAA,UAAA,EACwB,CAAA,EAAZ,YAAY,CAAZ;AAAA,OAAA,CAAA,YAAA,GAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJb,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAEA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,MAAM;AAAE,EAAA;AAAF,IAAa,OAAO,CAAC,oCAAD,CAA1B;;AAGA,IAAa,aAAa,GAA1B,MAAa,aAAb,CAA0B;AAKxB,EAAA,WAAA,CACU,WADV,EAEU,YAFV,EAEoC;AAD1B,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,YAAA,GAAA,YAAA;AANF,SAAA,IAAA,GAAO,MAAA,CAAA,EAAA,CAAG,EAAH,CAAP;AACA,SAAA,UAAA,GAAqB,GAAG,IAAA,CAAA,OAAA,EAAS,QAAjC;AACA,SAAA,YAAA,GAAuB,GAAG,KAAK,UAAU,SAAzC;AACA,SAAA,eAAA,GAA0B,GAAG,KAAK,YAAY,eAA9C;AAIJ;;AAEJ,EAAA,YAAY,CAAC,OAAD,EAAuB;AACjC,WAAO,KAAK,cAAL,CAAoB,OAApB,EAA6B,IAA7B,CACL,WAAA,CAAA,SAAA,CAAU,CAAC,CAAC,QAAD,CAAD,KACR,KAAK,YAAL,CACE,MAAM,CAAC,MAAP,CAAc,QAAQ,GAAG,QAAH,GAAe,EAArC,EAAiD;AAC/C,MAAA,cAAc,EAAE,OAAO,CAAC;AADuB,KAAjD,CADF,CADF,CADK,EAQL,WAAA,CAAA,SAAA,CAAU,QAAQ,IAAI,KAAK,eAAL,CAAqB,QAArB,CAAtB,CARK,EASL,WAAA,CAAA,SAAA,CAAU,UAAU,IAClB,MAAA,CAAA,aAAA,CAAc,CACZ,KAAK,OAAL,CAAa,OAAb,CADY,EAEZ,GAAG,UAAU,CAAC,GAAX,CAAe,CAAC,IACjB,KAAK,OAAL,CACE,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB;AAAE,MAAA,cAAc,EAAE,OAAO,CAAC;AAA1B,KAAjB,CADF,CADC,CAFS,CAAd,CADF,CATK,EAmBL,WAAA,CAAA,GAAA,CAAI,MAAM,OAAV,CAnBK,CAAP;AAqBD;;AAEa,EAAA,OAAO,CAAC,OAAD,EAAuB;;AAC1C,UAAI,EAAE,MAAM,MAAA,CAAA,SAAA,CAAU,IAAA,CAAA,MAAV,EAAkB,OAAO,CAAC,QAA1B,CAAR,CAAJ,EAAkD;AAChD,cAAM,MAAA,CAAA,SAAA,CAAU,MAAV,EAAkB,OAAO,CAAC,QAA1B,CAAN;AACD;;AACD,YAAM,eAAe,GAAG,GAAG,OAAO,CAAC,QAAQ,oBAA3C;;AACA,UAAI,EAAE,MAAM,MAAA,CAAA,SAAA,CAAU,IAAA,CAAA,MAAV,EAAkB,eAAlB,CAAR,CAAJ,EAAiD;AAC/C,cAAM,KAAK,kBAAL,CAAwB,eAAxB,EAAyC,OAAzC,CAAN;AACD;;AACD,YAAM,IAAI,GAAG,CACX,QADW,EAEX,YAFW,EAGX,qBAHW,EAIX,iBAJW,CAAb;AAMA,YAAM,KAAK,YAAL,CAAkB,KAAlB,CAAwB,MAAxB,EAAgC,IAAhC,EAAsC,OAAO,CAAC,QAA9C,CAAN;AACA,aAAO,OAAP;AACD;AAAA;;AAEa,EAAA,YAAY,CAAC,OAAD,EAAuB;;AAC/C,UAAI,WAAW,GAAoB,EAAnC;AACA,YAAM,QAAQ,GAAG,MAAjB;;AACA,UAAI;AACF,QAAA,WAAW,GAAG,IAAI,CAAC,KAAL,EACZ,MAAM,MAAA,CAAA,SAAA,CAAU,IAAA,CAAA,QAAV,EAAoB,KAAK,eAAzB,EAA0C;AAAE,UAAA;AAAF,SAA1C,CADM,EAAd;AAGD,OAJD,CAIE,OAAO,CAAP,EAAU,CAAE;;AACd,YAAM,MAAA,CAAA,SAAA,CAAU,IAAA,CAAA,SAAV,EACJ,KAAK,eADD,EAEJ,IAAI,CAAC,SAAL,CACE,WAAW,CAAC,MAAZ,CAAmB,CAAC,IAAI,CAAC,CAAC,QAAF,KAAe,OAAO,CAAC,QAA/C,EAAyD,MAAzD,CAAgE,OAAhE,CADF,CAFI,EAKJ;AAAE,QAAA;AAAF,OALI,CAAN;AAOA,aAAO,OAAP;AACD;AAAA;;AACa,EAAA,kBAAkB,CAAC,eAAD,EAAkB,OAAlB,EAAwC;;AACtE,UAAI,IAAI,GAAG,IAAX;;AACA,UAAI,OAAO,CAAC,cAAR,CAAuB,IAA3B,EAAiC;AAC/B,QAAA,IAAI,GAAG,OAAO,CAAC,cAAR,CAAuB,IAA9B;AACD;;AACD,aAAO,MAAM,MAAA,CAAA,SAAA,CAAU,IAAA,CAAA,SAAV,EACX,eADW,EAEX;;;8CAGwC,IAAI;;CALjC,CAAb;AASD;AAAA;;AACO,EAAA,cAAc,CAAC,OAAD,EAAuB;AAC3C,WAAO,MAAA,CAAA,IAAA,CAAK,KAAK,WAAL,CAAiB,QAAjB,EAAL,EAAkC,IAAlC,CACL,WAAA,CAAA,SAAA,CAAU,IAAI,IACZ,IAAI,CAAC,MAAL,GACI,KAAK,WAAL,CAAiB,cAAjB,CAAgC,OAAO,CAAC,QAAxC,CADJ,GAEI,KAAK,IAHX,CADK,CAAP;AAOD;;AACO,EAAA,eAAe,CAAC,IAAD,EAAoB;AACzC,WAAO,IAAI,IAAI,IAAI,CAAC,QAAb,GACH,KAAK,WAAL,CAAiB,cAAjB,CAAgC,IAAI,CAAC,QAArC,EAA+C,OAA/C,CAAuD,IAAI,CAAC,QAA5D,CADG,GAEH,KAAK,IAFT;AAGD;;AAjGuB,CAA1B;AAAa,aAAa,GAAA,UAAA,CAAA,CADzB,MAAA,CAAA,OAAA,EACyB,uDAMD,cAAA,CAAA,gBAAW,eAAX,cAAA,CAAA,iBAAW,aAAA,KAAA,QAAA,QAAA,EAAA,GAAA,OACV,eAAA,CAAA,YADU,KACE,WADF,IACV,eAAA,CAAA,YADU,MACE,UADF,GACE,EADF,GACE,QAPZ,CAAA,EAAb,aAAa,CAAb;AAAA,OAAA,CAAA,aAAA,GAAA,aAAA;;;;;;;;;;;;;;;;ACZb,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAKA,IAAa,iBAAiB,GAA9B,MAAa,iBAAb,CAA8B;AAC1B,EAAA,SAAS,CACL,UADK,EAEL,OAFK,EAGL,OAHK,EAIL,UAJK,EAI+B;AAEpC,IAAA,OAAO,CAAC,GAAR,CAAY,WAAZ;AACA,UAAM,OAAO,GAAG;AAAE,MAAA,OAAO,EAAE;AAAX,KAAhB,CAHoC,CAIpC;AACA;AACA;AACA;AACA;;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,WAAO,UAAU,CAAC,IAAX,CACH,WAAA,CAAA,GAAA,CAAI,MAAM,OAAO,CAAC,GAAR,CAAY,YAAY,IAAI,CAAC,GAAL,KAAa,GAAG,IAAxC,CAAV,CADG,CAAP;AAQH;;AAvByB,CAA9B;AAAa,iBAAiB,GAAA,UAAA,CAAA,CAD7B,MAAA,CAAA,UAAA,EAC6B,CAAA,EAAjB,iBAAiB,CAAjB;AAAA,OAAA,CAAA,iBAAA,GAAA,iBAAA;;;;;;;;;;;;;;;;;;;;;;ACPb,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAaA,MAAA,cAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,sBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;AAGA,IAAa,gBAAgB,GAA7B,MAAa,gBAAb,CAA6B;AAC3B,EAAA,WAAA,CACU,WADV,EAEU,aAFV,EAGU,MAHV,EAG+B;AAFrB,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAER,QAAI,KAAK,GAAG,CAAZ;AACA,IAAA,WAAW,CAAC,MAAK;AACf,MAAA,MAAM,CAAC,OAAP,CAAe,qBAAf,EAAsC,KAAK,EAA3C;AACD,KAFU,EAER,IAFQ,CAAX;AAGD;;AAMD,EAAA,kBAAkB,CAAC,OAAD,EAAQ;AACxB,WAAO;AACL,MAAA,QAAQ,EAAE;AADL,KAAP;AAGD;;AAID,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,WAAL,CAAiB,QAAjB,EAAP;AACD;;AAkBD,EAAA,YAAY,CAAC,IAAD,EAAO,OAAP,EAA6B;AACvC,WAAO,KAAK,aAAL,CAAmB,YAAnB,CAAgC,OAAhC,CAAP;AACD;;AA9C0B,CAA7B;;AAgBE,UAAA,CAAA,CAJC,MAAA,CAAA,IAAA,CAAK,gBAAA,CAAA,YAAL,CAID,EAHC,MAAA,CAAA,SAAA,CAAW,IAAD,IAA4B,IAAI,CAAC,MAAL,CAAY,aAAZ,CAA0B,qBAA1B,CAAtC,CAGD,EAFC,MAAA,CAAA,WAAA,CAAY,oBAAA,CAAA,iBAAZ,CAED,EADC,MAAA,CAAA,YAAA,EACD,qCAAA,2CAAA,yCAAA,CAAA,4BAAA,sBAAA,MAAA,CAAA;;AAQA,UAAA,CAAA,CAFC,MAAA,CAAA,IAAA,CAAK,IAAI,MAAA,CAAA,WAAJ,CAAgB,gBAAA,CAAA,YAAhB,CAAL,CAED,EADC,MAAA,CAAA,KAAA,EACD,qCAAA,qCAAA,yCAAA,CAAA,4BAAA,eAAA,MAAA,CAAA;;AAoBA,UAAA,CAAA,CAhBC,MAAA,CAAA,IAAA,CAAK,gBAAA,CAAA,YAAL,CAgBD,EAfC,MAAA,CAAA,WAAA,CAAY,oBAAA,CAAA,iBAAZ,CAeD,EAdC,MAAA,CAAA,QAAA,CAAS;AACR,EAAA,QAAQ,EAAE;AACR,IAAA,IAAI,EAAE,IAAI,MAAA,CAAA,cAAJ,CAAmB,MAAA,CAAA,aAAnB;AADE,GADF;AAIR,EAAA,iBAAiB,EAAE;AACjB,IAAA,IAAI,EAAE,MAAA,CAAA;AADW,GAJX;AAOR,EAAA,QAAQ,EAAE;AACR,IAAA,IAAI,EAAE,MAAA,CAAA;AADE,GAPF;AAUR,EAAA,cAAc,EAAE;AACd,IAAA,IAAI,EAAE,sBAAA,CAAA;AADQ;AAVR,CAAT,CAcD,qCAAA,+DAA4B,mBAAA,CAAA,kBAAa,eAAb,mBAAA,CAAA,mBAAa,aAAA,KAAA,QAAzC,sDAA4C,MAAA,CAAA,eAAU,eAAV,MAAA,CAAA,gBAAU,aAAA,KAAA,OAAtD,CAAA,4BAAA,gBAAA,MAAA,CAAA;;AA5CW,gBAAgB,GAAA,UAAA,CAAA,CAD5B,MAAA,CAAA,UAAA,EAC4B,uDAEJ,cAAA,CAAA,gBAAW,eAAX,cAAA,CAAA,iBAAW,aAAA,KAAA,QAAA,QAAA,EAAA,GAAA,OACT,gBAAA,CAAA,aADS,KACI,WADJ,IACT,gBAAA,CAAA,aADS,MACI,UADJ,GACI,EADJ,GACI,QAAA,QAAA,EAAA,GAAA,OACpB,MAAA,CAAA,aADoB,KACP,WADO,IACpB,MAAA,CAAA,aADoB,MACP,UADO,GACP,EADO,GACP,QAJJ,CAAA,EAAhB,gBAAgB,CAAhB;AAAA,OAAA,CAAA,gBAAA,GAAA,gBAAA;;;;;;;;;;;;;;;;ACtBb,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAKA,IAAa,UAAU,GAAvB,MAAa,UAAb,CAAuB,EAAvB;AAAa,UAAU,GAAA,UAAA,CAAA,CAHtB,MAAA,CAAA,MAAA,CAAO;AACN,EAAA,QAAQ,EAAE,CAAC,cAAA,CAAA,WAAD,EAAc,gBAAA,CAAA,aAAd,EAA6B,eAAA,CAAA,YAA7B;AADJ,CAAP,CAGsB,CAAA,EAAV,UAAU,CAAV;AAAA,OAAA,CAAA,UAAA,GAAA,UAAA;;;;;;;;;;;;;;;;ACRb,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAMA,IAAa,YAAY,GAAzB,MAAa,YAAb,CAAyB,EAAzB;AAAa,YAAY,GAAA,UAAA,CAAA,CAJxB,MAAA,CAAA,MAAA,CAAO;AACN,EAAA,OAAO,EAAE,CAAC,aAAA,CAAA,UAAD,CADH;AAEN,EAAA,WAAW,EAAE,CAAC,mBAAA,CAAA,gBAAD;AAFP,CAAP,CAIwB,CAAA,EAAZ,YAAY,CAAZ;AAAA,OAAA,CAAA,YAAA,GAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;ACRb,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAOA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AAGA,IAAa,YAAY,GAAzB,MAAa,YAAb,CAAyB;AAQvB,EAAA,WAAA,CACU,uBADV,EAEU,WAFV,EAEkC;AADxB,SAAA,uBAAA,GAAA,uBAAA;AACA,SAAA,WAAA,GAAA,WAAA;AARV,SAAA,SAAA,GAAsD,EAAtD;AACA,SAAA,oBAAA,GAAuB,GAAG,IAAA,CAAA,OAAA,EAAS,uBAAnC;AACA,SAAA,4BAAA,GAA+B,WAA/B;AACA,SAAA,mBAAA,GAAsB,uBAAtB;AACA,SAAA,uBAAA,GAA0B,aAA1B;;AAMA,SAAA,SAAA,GAAY,CAAC,IAAD,EAAe,QAAA,GAAmB,KAAK,mBAAvC,KAA8D;AACxE,UAAI,KAAK,SAAL,CAAe,IAAf,CAAJ,EAA0B;AACxB,eAAO,KAAK,SAAL,CAAe,IAAf,CAAP;AACD;;AACD,aAAO,IAAI,MAAA,CAAA,UAAJ,CAAe,CAAC,IAAG;AACxB,aAAK,uBAAL,CACG,wBADH,CAC4B;AACxB,UAAA,IADwB;AAExB,UAAA;AAFwB,SAD5B,EAKG,IALH,CAMI,WAAA,CAAA,IAAA,CAAK,CAAL,CANJ,EAOI,WAAA,CAAA,GAAA,CAAK,EAAD,IAAqC,OAAO,CAAC,GAAR,CAAY,kBAAkB,EAAE,CAAC,IAAI,UAAU,KAAK,mBAAmB,GAAG,IAAI,EAA9E,CAAzC,CAPJ,EAQI,WAAA,CAAA,SAAA,CAAW,cAAD,IACR,KAAK,uBAAL,CAA6B,YAA7B,CACE;AACE,UAAA,QAAQ,EAAE,KAAK,uBADjB;AAEE,UAAA,SAAS,EAAE,cAAc,CAAC,IAF5B;AAGE,UAAA,SAAS,EAAE,IAHb;AAIE,UAAA,YAAY,EAAE,KAAK,4BAJrB;AAKE,UAAA,IAAI,EAAE,GAAG,KAAK,mBAAmB,GAAG,cAAc,CAAC,MAAM;AAL3D,SADF,EAQE,cAAc,CAAC,IARjB,CADF,CARJ,EAsBG,SAtBH,CAuBI,IAAI,IAAG;AACL,gBAAM,aAAa,GAAG,KAAK,UAAL,CAAgB,IAAhB,CAAtB;AACA,eAAK,SAAL,CAAe,IAAf,IAAuB,aAAvB;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,aAAa,CAAC,QAAd,CAAuB,UAAnC;AACA,UAAA,CAAC,CAAC,IAAF,CAAO,aAAP;AACA,UAAA,CAAC,CAAC,QAAF;AACD,SA7BL,EA8BI,CAAC,IAAG;AACF,UAAA,CAAC,CAAC,KAAF,CAAQ,CAAR;AACA,UAAA,CAAC,CAAC,QAAF;AACD,SAjCL;AAmCD,OApCM,CAAP;AAqCD,KAzCD;AADI;;AA4CI,EAAA,UAAU,CAAC,CAAD,EAAO;AACvB,WAAO,CAAC,CAAC,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAD,CAAR;AACD;;AAED,EAAA,WAAW,CAAC,OAAA,GAAoB,EAArB,EAAyB,aAAA,GAAwB,KAAK,oBAAtD,EAA0E;AACnF,QAAI,OAAO,GAAG,MAAA,CAAA,EAAA,CAAG,EAAH,CAAd;;AACA,QAAI,KAAK,WAAL,CAAiB,SAAjB,CAA2B,aAA3B,CAAJ,EAA+C;AAC7C,MAAA,OAAO,GAAG,KAAK,WAAL,CAAiB,UAAjB,CAA4B,aAA5B,CAAV;AACD;;AACD,WAAO,OAAO,CAAC,IAAR,CACL,WAAA,CAAA,GAAA,CAAI,CAAC,IAAG;AACN,aAAO,CAAC,GAAG,IAAI,GAAJ,CAAQ,CAAR,CAAJ,EACJ,GADI,CACA,IAAI,IAAG;AACV,YAAI,CAAE,IAAI,MAAJ,CAAW,oBAAX,EAAiC,IAAjC,CAAsC,IAAtC,CAAN,EAAoD;AAClD,iBAAO,KAAK,UAAL,CAAgB,OAAO,CAAC,IAAD,CAAvB,CAAP;AACD;AACF,OALI,EAMJ,MANI,CAMG,CAAC,IAAI,CAAC,CAAC,CANV,CAAP;AAOD,KARD,CADK,EAUL,WAAA,CAAA,SAAA,CAAU,aAAa,IACrB,MAAA,CAAA,EAAA,CAAG,IAAH,EAAS,IAAT,CACE,WAAA,CAAA,aAAA,CAAc,CAAC,GAAG,IAAI,GAAJ,CAAQ,OAAR,CAAJ,EAAsB,GAAtB,CAA0B,IAAI,IAAI,KAAK,SAAL,CAAe,IAAf,CAAlC,CAAd,CADF,EAEE,WAAA,CAAA,GAAA,CAAI,eAAe,IAAI,CAAC,GAAG,IAAI,GAAJ,CAAQ,CAAC,GAAG,eAAJ,EAAqB,GAAG,aAAxB,CAAR,CAAJ,CAAvB,CAFF,EAGE,WAAA,CAAA,GAAA,CAAI,CAAC,IAAI,CAAC,CAAC,MAAF,CAAS,CAAC,IAAI,CAAC,CAAC,CAAhB,CAAT,CAHF,CADF,CAVK,CAAP;AAkBD;;AAlFsB,CAAzB;AAAa,YAAY,GAAA,UAAA,CAAA,CADxB,MAAA,CAAA,UAAA,EACwB,uDASY,MAAA,CAAA,qBAAgB,eAAhB,MAAA,CAAA,sBAAgB,aAAA,KAAA,QAAA,QAAA,EAAA,GAAA,OAC5B,MAAA,CAAA,WAD4B,KACjB,WADiB,IAC5B,MAAA,CAAA,WAD4B,MACjB,UADiB,GACjB,EADiB,GACjB,QAVX,CAAA,EAAZ,YAAY,CAAZ;AAAA,OAAA,CAAA,YAAA,GAAA,YAAA;;;;;;;;ACbb,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,uBAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;;AAEA,MAAA,CAAA,SAAA,CAAU,GAAV,CAAc,uBAAA,CAAA,YAAd,EACG,WADH,CACe,CAAC,gDAAD,CADf,EAEG,IAFH,CAGI,WAAA,CAAA,SAAA,CAAU,aAAa,IACrB,MAAA,CAAA,KAAA,CAAM;AACJ,EAAA,OAAO,EAAE,CACP,GAAG,aADI,EAEP,MAAA,CAAA,UAAA,CAAW,OAAX,CAAmB;AACjB,IAAA,MAAM,EAAE;AACN,MAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE;AADF;AADA,KADS;AAMjB,IAAA,OAAO,EAAE;AACP,MAAA,QAAQ,EAAE,IADH;AAEP,MAAA,WAAW,EAAE,IAFN;AAGP,MAAA,kBAAkB,EAAE;AAHb,KANQ;AAWjB;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,MAAM,EAAE;AACN,MAAA,SAAS,EAAE,IADL;AAEN,MAAA,IAAI,EAAE;AAFA;AAjBS,GAAnB,CAFO,EAwBP,eAAA,CAAA,YAxBO;AADL,CAAN,CADF,CAHJ,EAkCG,SAlCH,CAkCa,MAAM,OAAO,CAAC,GAAR,CAAY,gBAAZ,CAlCnB,EAkCkD,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAlClD","file":"main.js","sourceRoot":"../../src/daemon-server","sourcesContent":["import { Injectable } from '@rxdi/core';\nimport { promisify } from 'util';\nimport { readFile } from 'fs';\nimport { homedir } from 'os';\nimport { ILinkListType } from '../../api-introspection/index';\n\n@Injectable()\nexport class ListService {\n  private linkedList: ILinkListType[] = [];\n  private gapiFolder: string = `${homedir()}/.gapi`;\n  private daemonFolder: string = `${this.gapiFolder}/daemon`;\n  private processListFile: string = `${this.daemonFolder}/process-list`;\n\n  async readList() {\n    try {\n      this.linkedList = JSON.parse(\n        await promisify(readFile)(this.processListFile, {\n          encoding: 'utf-8'\n        })\n      );\n    } catch (e) {}\n    return this.linkedList;\n  }\n\n  async findByRepoPath(repoPath: string) {\n    return (await this.readList()).filter(l => l.repoPath === repoPath);\n  }\n\n  findByLinkName(linkName: string) {\n    return {\n      results: async () =>\n        (await this.readList()).filter(l => l.linkName === linkName),\n      exclude: async (isNotLike: string) =>\n        (await this.readList()).filter(\n          l => l.linkName === linkName && l.repoPath !== isNotLike\n        )\n    };\n  }\n}\n","import { GraphQLObjectType, GraphQLInputObjectType, GraphQLInt } from 'graphql';\n\nexport const ServerMetadataType = new GraphQLObjectType({\n  name: 'ServerMetadataType',\n  fields: () => ({\n    port: {\n      type: GraphQLInt\n    }\n  })\n});\n\nexport const ServerMetadataInputType = new GraphQLInputObjectType({\n  name: 'ServerMetadataInputType',\n  fields: () => ({\n    port: {\n      type: GraphQLInt\n    }\n  })\n});\n","import { GraphQLObjectType, GraphQLString } from 'graphql';\nimport { ServerMetadataType } from './server-metadata.type';\n\nexport const LinkListType = new GraphQLObjectType({\n  name: 'LinkListType',\n  fields: () => ({\n    repoPath: {\n      type: GraphQLString\n    },\n    introspectionPath: {\n      type: GraphQLString\n    },\n    linkName: {\n      type: GraphQLString\n    },\n    serverMetadata: {\n      type: ServerMetadataType\n    }\n  })\n});\n","// tslint:disable\n// graphql typescript definitions\n\n\n  export interface IGraphQLResponseRoot {\n    data?: IQuery | IMutation | ISubscription;\n    errors?: Array<IGraphQLResponseError>;\n  }\n\n  export interface IGraphQLResponseError {\n    message: string;            // Required for all errors\n    locations?: Array<IGraphQLResponseErrorLocation>;\n    [propName: string]: any;    // 7.2.2 says 'GraphQL servers may provide additional entries to error'\n  }\n\n  export interface IGraphQLResponseErrorLocation {\n    line: number;\n    column: number;\n  }\n\n  /**\n    description: Query type for all get requests which will not change persistent data\n  */\n  export interface IQuery {\n    __typename?: \"Query\";\n    status: IStatusQueryType | null;\n    getLinkList: Array<ILinkListType> | null;\n}\n\n  \n  export interface IStatusQueryType {\n    __typename?: \"StatusQueryType\";\n    status: string | null;\n}\n\n  \n  export interface ILinkListType {\n    __typename?: \"LinkListType\";\n    repoPath: string | null;\n    introspectionPath: string | null;\n    linkName: string | null;\n    serverMetadata: IServerMetadataType | null;\n}\n\n  \n  export interface IServerMetadataType {\n    __typename?: \"ServerMetadataType\";\n    port: number | null;\n}\n\n  /**\n    description: Mutation type for all requests which will change persistent data\n  */\n  export interface IMutation {\n    __typename?: \"Mutation\";\n    notifyDaemon: ILinkListType | null;\n}\n\n  \n  export interface IServerMetadataInputType {\n    port?: number | null;\n}\n\n  /**\n    description: Subscription type for all subscriptions via pub sub\n  */\n  export interface ISubscription {\n    __typename?: \"Subscription\";\n    statusSubscription: ILinkListType | null;\n}\n\n\n// tslint:enable\n","import { Injectable } from '@rxdi/core';\nimport { spawn } from 'child_process';\n\n@Injectable()\nexport class ChildService {\n  spawn(\n    command: string,\n    args: string[],\n    cwd: string,\n    wait: number = 30 * 1000\n  ) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(command, args, { cwd, detached: true });\n      const timeout = setTimeout(() => {\n        const message = `${command} ${args.toString()} exited with timeout after ${wait /\n          1000} seconds`;\n        child.kill(message);\n        reject(message);\n        clearTimeout(timeout);\n      }, wait);\n      child.stdout.on('data', data => process.stdout.write(data));\n      child.stderr.on('data', data => process.stderr.write(data));\n      child.on('close', code => {\n        clearTimeout(timeout);\n        if (!code) {\n          resolve(code);\n        } else {\n          reject(code);\n        }\n      });\n    });\n  }\n}\n","import { Service } from '@rxdi/core';\nimport { exists, writeFile, readFile } from 'fs';\nimport { promisify } from 'util';\nimport { ILinkListType } from '../../api-introspection';\nimport { from, of, combineLatest } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ListService } from './list.service';\nimport { ChildService } from './child.service';\nimport { homedir } from 'os';\nconst { mkdirp } = require('@rxdi/core/dist/services/file/dist');\n\n@Service()\nexport class DaemonService {\n  private noop = of([] as ILinkListType[]);\n  private gapiFolder: string = `${homedir()}/.gapi`;\n  private daemonFolder: string = `${this.gapiFolder}/daemon`;\n  private processListFile: string = `${this.daemonFolder}/process-list`;\n  constructor(\n    private listService: ListService,\n    private childService: ChildService\n  ) {}\n\n  notifyDaemon(payload: ILinkListType) {\n    return this.findByRepoPath(payload).pipe(\n      switchMap(([mainNode]) =>\n        this.saveMainNode(\n          Object.assign(mainNode ? mainNode : ({} as any), {\n            serverMetadata: payload.serverMetadata\n          })\n        )\n      ),\n      switchMap(mainNode => this.findLinkedRepos(mainNode)),\n      switchMap(otherRepos =>\n        combineLatest([\n          this.trigger(payload),\n          ...otherRepos.map(r =>\n            this.trigger(\n              Object.assign(r, { serverMetadata: payload.serverMetadata })\n            )\n          )\n        ])\n      ),\n      map(() => payload)\n    );\n  }\n\n  private async trigger(payload: ILinkListType): Promise<ILinkListType> {\n    if (!(await promisify(exists)(payload.repoPath))) {\n      await promisify(mkdirp)(payload.repoPath);\n    }\n    const gapiLocalConfig = `${payload.repoPath}/gapi-cli.conf.yml`;\n    if (!(await promisify(exists)(gapiLocalConfig))) {\n      await this.writeGapiCliConfig(gapiLocalConfig, payload);\n    }\n    const args = [\n      'schema',\n      'introspect',\n      '--collect-documents',\n      '--collect-types'\n    ];\n    await this.childService.spawn('gapi', args, payload.repoPath);\n    return payload;\n  }\n\n  private async saveMainNode(payload: ILinkListType) {\n    let processList: ILinkListType[] = [];\n    const encoding = 'utf8';\n    try {\n      processList = JSON.parse(\n        await promisify(readFile)(this.processListFile, { encoding })\n      );\n    } catch (e) {}\n    await promisify(writeFile)(\n      this.processListFile,\n      JSON.stringify(\n        processList.filter(p => p.repoPath !== payload.repoPath).concat(payload)\n      ),\n      { encoding }\n    );\n    return payload;\n  }\n  private async writeGapiCliConfig(gapiLocalConfig, payload: ILinkListType) {\n    let port = 9000;\n    if (payload.serverMetadata.port) {\n      port = payload.serverMetadata.port;\n    }\n    return await promisify(writeFile)(\n      gapiLocalConfig,\n      `\nconfig:\n  schema:\n    introspectionEndpoint: http://localhost:${port}/graphql\n    introspectionOutputFolder: ./api-introspection\n`\n    );\n  }\n  private findByRepoPath(payload: ILinkListType) {\n    return from(this.listService.readList()).pipe(\n      switchMap(list =>\n        list.length\n          ? this.listService.findByRepoPath(payload.repoPath)\n          : this.noop\n      )\n    );\n  }\n  private findLinkedRepos(repo: ILinkListType) {\n    return repo && repo.linkName\n      ? this.listService.findByLinkName(repo.linkName).exclude(repo.repoPath)\n      : this.noop;\n  }\n}\n","import { InterceptResolver, Injectable, GenericGapiResolversType } from '@gapi/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ILinkListType } from '../../../daemon-server/api-introspection';\nimport notifier = require('node-notifier');\n\n@Injectable()\nexport class NotifyInterceptor implements InterceptResolver {\n    intercept(\n        chainable$: Observable<any>,\n        context,\n        payload: ILinkListType,\n        descriptor: GenericGapiResolversType\n    ) {\n        console.log('Before...');\n        const options = { timeout: 2 }\n        // notifier.notify({\n        //     'title': `Daemon triggered!`,\n        //     'message': `${payload.repoPath}`,\n        //     ...options\n        // });\n        const now = Date.now();\n        return chainable$.pipe(\n            tap(() => console.log(`After... ${Date.now() - now}ms`)),\n            // tap(() => notifier.notify({\n            //     'title': 'Daemon finished!',\n            //     'message': `Request took ${Date.now() - now}ms`,\n            //     ...options\n            // }))\n        );\n    }\n}","import {\n  Controller,\n  PubSubService,\n  Type,\n  Query,\n  GraphQLList,\n  Mutation,\n  GraphQLString,\n  GraphQLNonNull,\n  Interceptor,\n  Subscription,\n  Subscribe\n} from '@gapi/core';\nimport { ListService } from './core/services/list.service';\nimport { LinkListType } from './types/link-list.type';\nimport { ILinkListType } from './api-introspection';\nimport { DaemonService } from './core/services/daemon.service';\nimport { Observable } from 'rxjs';\nimport { ServerMetadataInputType } from './types/server-metadata.type';\nimport { NotifyInterceptor } from './core/interceptors/notify.interceptor';\n\n@Controller()\nexport class ServerController {\n  constructor(\n    private listService: ListService,\n    private daemonService: DaemonService,\n    private pubsub: PubSubService\n  ) {\n    let count = 0;\n    setInterval(() => {\n      pubsub.publish('CREATE_SIGNAL_BASIC', count++);\n    }, 2000);\n  }\n\n  @Type(LinkListType)\n  @Subscribe((self: ServerController) => self.pubsub.asyncIterator('CREATE_SIGNAL_BASIC'))\n  @Interceptor(NotifyInterceptor)\n  @Subscription()\n  statusSubscription(message) {\n    return {\n      repoPath: message\n    }\n  }\n\n  @Type(new GraphQLList(LinkListType))\n  @Query()\n  getLinkList() {\n    return this.listService.readList();\n  }\n\n  @Type(LinkListType)\n  @Interceptor(NotifyInterceptor)\n  @Mutation({\n    repoPath: {\n      type: new GraphQLNonNull(GraphQLString)\n    },\n    introspectionPath: {\n      type: GraphQLString\n    },\n    linkName: {\n      type: GraphQLString\n    },\n    serverMetadata: {\n      type: ServerMetadataInputType\n    }\n  })\n  notifyDaemon(root, payload: ILinkListType): Observable<ILinkListType> {\n    return this.daemonService.notifyDaemon(payload);\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { ListService } from './services/list.service';\nimport { DaemonService } from './services/daemon.service';\nimport { ChildService } from './services/child.service';\n\n@Module({\n  services: [ListService, DaemonService, ChildService]\n})\nexport class CoreModule {}\n","import { Module } from '@gapi/core';\nimport { ServerController } from './server.controller';\nimport { CoreModule } from './core/core.module';\n\n@Module({\n  imports: [CoreModule],\n  controllers: [ServerController]\n})\nexport class ServerModule {}\n","import {\n  Injectable,\n  ExternalImporter,\n  ExternalModuleConfiguration,\n  FileService,\n  Metadata\n} from '@rxdi/core';\nimport { Observable } from 'rxjs';\nimport { take, switchMap, map, combineLatest, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { homedir } from 'os';\n\n@Injectable()\nexport class PluginLoader {\n\n  hashCache: { [key: string]: { metadata: Metadata} } = {};\n  defaultPluginsFolder = `${homedir()}/.gapi/daemon/plugins`;\n  defaultExternalPluginsFolder = '/plugins/';\n  defaultIpfsProvider = 'https://ipfs.io/ipfs/';\n  defaultDownloadFilename = 'gapi-plugin';\n\n  constructor(\n    private externalImporterService: ExternalImporter,\n    private fileService: FileService\n  ) {}\n  getModule = (hash: string, provider: string = this.defaultIpfsProvider) => {\n    if (this.hashCache[hash]) {\n      return this.hashCache[hash];\n    }\n    return new Observable(o => {\n      this.externalImporterService\n        .downloadIpfsModuleConfig({\n          hash,\n          provider\n        })\n        .pipe(\n          take(1),\n          tap((em: ExternalModuleConfiguration) => console.log(`Plugin loaded: ${em.name} hash: ${this.defaultIpfsProvider}${hash}`)),\n          switchMap((externalModule: ExternalModuleConfiguration) =>\n            this.externalImporterService.importModule(\n              {\n                fileName: this.defaultDownloadFilename,\n                namespace: externalModule.name,\n                extension: 'js',\n                outputFolder: this.defaultExternalPluginsFolder,\n                link: `${this.defaultIpfsProvider}${externalModule.module}`\n              },\n              externalModule.name\n            )\n          ),\n        )\n        \n        .subscribe(\n          data => {\n            const currentModule = this.loadModule(data);\n            this.hashCache[hash] = currentModule\n            console.log(currentModule.metadata.moduleHash)\n            o.next(currentModule);\n            o.complete();\n          },\n          e => {\n            o.error(e);\n            o.complete();\n          }\n        );\n    });\n  };\n\n  private loadModule(m: any): { metadata: Metadata } {\n    return m[Object.keys(m)[0]]\n  }\n\n  loadPlugins(modules: string[] = [], pluginsFolder: string = this.defaultPluginsFolder) {\n    let plugins = of([]);\n    if (this.fileService.isPresent(pluginsFolder)) {\n      plugins = this.fileService.fileWalker(pluginsFolder);\n    }\n    return plugins.pipe(\n      map(p => {\n        return [...new Set(p)]\n          .map(path => {\n            if (!(new RegExp(/^(.(?!.*\\.js$))*$/g).test(path))) {\n              return this.loadModule(require(path));\n            }\n          })\n          .filter(p => !!p);\n      }),\n      switchMap(pluginModules =>\n        of(null).pipe(\n          combineLatest([...new Set(modules)].map(hash => this.getModule(hash))),\n          map(externalModules => [...new Set([...externalModules, ...pluginModules])]),\n          map(m => m.filter(i => !!i))\n        )\n      )\n    );\n  }\n}\n","import { setup } from '@rxdi/core';\nimport { ServerModule } from './server.module';\nimport { CoreModule } from '@gapi/core';\nimport { Container } from '@gapi/core';\nimport { switchMap } from 'rxjs/operators';\nimport { PluginLoader } from './core/services/plugin-loader.service';\n\nContainer.get(PluginLoader)\n  .loadPlugins(['QmV6yQAwHjtBF7uB4jsyAGGTTiq1Wfz4eNK7WPLKMwFahC'])\n  .pipe(\n    switchMap(pluginModules =>\n      setup({\n        imports: [\n          ...pluginModules,\n          CoreModule.forRoot({\n            server: {\n              hapi: {\n                port: 42001\n              }\n            },\n            graphql: {\n              graphiql: true,\n              openBrowser: true,\n              graphiQlPlayground: false\n            },\n            // pubsub: {\n            //   host: 'localhost',\n            //   port: 5672,\n            //   log: true,\n            //   activateRabbitMQ: true\n            // },\n            daemon: {\n              activated: true,\n              link: 'http://localhost:42001/graphql'\n            }\n          }),\n          ServerModule\n        ]\n      })\n    )\n  )\n  .subscribe(() => console.log('Server started'), console.error.bind(console));\n"]}