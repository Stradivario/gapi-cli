{"version":3,"sources":["core/services/list.service.ts","types/server-metadata.type.ts","types/link-list.type.ts","api-introspection/index.ts","core/services/daemon.service.ts","server.controller.ts","core/core.module.ts","server.module.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../../src/daemon-server","sourcesContent":["import { Injectable } from '@rxdi/core';\nimport { promisify } from 'util';\nimport { readFile } from 'fs';\nimport { homedir } from 'os';\nimport { ILinkListType } from '../../api-introspection/index';\n\n@Injectable()\nexport class ListService {\n    private linkedList: ILinkListType[] = [];\n    private gapiFolder: string = `${homedir()}/.gapi`;\n    private daemonFolder: string = `${this.gapiFolder}/daemon`;\n    private processListFile: string = `${this.daemonFolder}/process-list`;\n\n    async readList() {\n        try {\n          this.linkedList = JSON.parse(await promisify(readFile)(this.processListFile, {\n            encoding: 'utf-8'\n          }))\n        } catch (e) {}\n        return this.linkedList\n    }\n\n    async findByRepoPath(repoPath: string) {\n      return (await this.readList()).filter(l => l.repoPath === repoPath);\n    }\n\n    async findByLinkName(linkName: string, notLike: string) {\n      return (await this.readList()).filter(l => l.linkName === linkName && l.repoPath !== notLike);\n    }\n\n\n}","import { GraphQLObjectType, GraphQLInputObjectType, GraphQLInt } from \"graphql\";\n\nexport const ServerMetadataType = new GraphQLObjectType({\n    name: 'ServerMetadataType',\n    fields: () => ({\n        port: {\n            type: GraphQLInt\n        }\n    })\n});\n\nexport const ServerMetadataInputType = new GraphQLInputObjectType({\n    name: 'ServerMetadataInputType',\n    fields: () => ({\n        port: {\n            type: GraphQLInt\n        }\n    })\n});","import { GraphQLObjectType, GraphQLString } from 'graphql';\nimport { ServerMetadataType } from './server-metadata.type';\n\nexport const LinkListType = new GraphQLObjectType({\n    name: 'LinkListType',\n    fields: () => ({\n        repoPath: {\n            type: GraphQLString\n        },\n        introspectionPath: {\n            type: GraphQLString\n        },\n        linkName: {\n            type: GraphQLString\n        },\n        serverMetadata: {\n            type: ServerMetadataType\n        }\n    })\n});","// tslint:disable\n// graphql typescript definitions\n\n\n  export interface IGraphQLResponseRoot {\n    data?: IQuery | IMutation;\n    errors?: Array<IGraphQLResponseError>;\n  }\n\n  export interface IGraphQLResponseError {\n    message: string;            // Required for all errors\n    locations?: Array<IGraphQLResponseErrorLocation>;\n    [propName: string]: any;    // 7.2.2 says 'GraphQL servers may provide additional entries to error'\n  }\n\n  export interface IGraphQLResponseErrorLocation {\n    line: number;\n    column: number;\n  }\n\n  /**\n    description: Query type for all get requests which will not change persistent data\n  */\n  export interface IQuery {\n    __typename?: \"Query\";\n    status: IStatusQueryType | null;\n    getLinkList: Array<ILinkListType> | null;\n}\n\n  \n  export interface IStatusQueryType {\n    __typename?: \"StatusQueryType\";\n    status: string | null;\n}\n\n  \n  export interface ILinkListType {\n    __typename?: \"LinkListType\";\n    repoPath: string | null;\n    introspectionPath: string | null;\n    linkName: string | null;\n    serverMetadata: IServerMetadataType | null;\n}\n\n  \n  export interface IServerMetadataType {\n    __typename?: \"ServerMetadataType\";\n    port: number | null;\n}\n\n  /**\n    description: Mutation type for all requests which will change persistent data\n  */\n  export interface IMutation {\n    __typename?: \"Mutation\";\n    notifyDaemon: ILinkListType | null;\n}\n\n  \n  export interface IServerMetadataInputType {\n    port?: number | null;\n}\n\n\n// tslint:enable\n","import { Service } from '@rxdi/core';\nimport { exists, writeFile } from 'fs';\nimport { promisify } from 'util';\nimport { spawn } from 'child_process';\nimport { ILinkListType } from '../../api-introspection';\n\n@Service()\nexport class DaemonService {\n  trigger(payload: ILinkListType): Promise<ILinkListType> {\n    return new Promise(async (resolve, reject) => {\n      const gapiLocalConfig = `${payload.repoPath}/gapi-cli.conf.yml`;\n      const args = [\n        'schema',\n        'introspect',\n        '--collect-documents',\n        '--collect-types'\n      ];\n      if (!(await promisify(exists)(gapiLocalConfig))) {\n        await this.writeGapiCliConfig(gapiLocalConfig);\n      }\n      const child = spawn('gapi', args, { cwd: payload.repoPath });\n      child.stdout.on('data', data => process.stdout.write(data));\n      child.stderr.on('data', data => process.stderr.write(data));\n      child.on('close', code => {\n        if (!code) {\n          resolve(payload);\n        } else {\n          reject(payload);\n        }\n      });\n    });\n  }\n\n  writeGapiCliConfig(gapiLocalConfig: string) {\n    return promisify(writeFile)(gapiLocalConfig, \n`\nconfig:\nschema:\n  introspectionEndpoint: http://localhost:9000/graphql\n  introspectionOutputFolder: ./api-introspection\n`\n    )\n  }\n}\n","import {\n  Controller,\n  PubSubService,\n  Type,\n  Query,\n  GraphQLList,\n  Mutation,\n  GraphQLString\n} from '@gapi/core';\nimport { ListService } from './core/services/list.service';\nimport { LinkListType } from './types/link-list.type';\nimport { ILinkListType } from './api-introspection';\nimport { DaemonService } from './core/services/daemon.service';\nimport { Observable, from, of, combineLatest } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ServerMetadataInputType } from './types/server-metadata.type';\n\n@Controller()\nexport class ServerController {\n  constructor(\n    private listService: ListService,\n    private daemonService: DaemonService\n  ) {}\n\n  @Type(new GraphQLList(LinkListType))\n  @Query()\n  getLinkList() {\n    return this.listService.readList();\n  }\n\n  @Type(LinkListType)\n  @Mutation({\n    repoPath: {\n      type: GraphQLString\n    },\n    introspectionPath: {\n      type: GraphQLString\n    },\n    linkName: {\n      type: GraphQLString\n    },\n    serverMetadata: {\n      type: ServerMetadataInputType\n    }\n  })\n  notifyDaemon(root, payload: ILinkListType): Observable<ILinkListType> {\n    return from(this.listService.readList()).pipe(\n      switchMap(list =>\n        list.length\n          ? this.listService.findByRepoPath(payload.repoPath)\n          : of([] as ILinkListType[])\n      ),\n      switchMap(([repo]) => {\n        if (repo && repo.linkName) {\n          return this.listService.findByLinkName(repo.linkName, repo.repoPath);\n        }\n        return of([] as ILinkListType[]);\n      }),\n      switchMap(otherRepos =>\n        combineLatest([\n          this.daemonService.trigger(payload),\n          ...otherRepos.map(r => this.daemonService.trigger(r))\n        ])\n      ),\n      map(() => payload)\n    );\n  }\n}\n","import { Module } from \"@rxdi/core\";\nimport { ListService } from \"./services/list.service\";\nimport { DaemonService } from \"./services/daemon.service\";\n\n@Module({\n    services: [ListService, DaemonService]\n})\nexport class CoreModule {}","import { Module } from \"@gapi/core\";\nimport { ServerController } from \"./server.controller\";\nimport { CoreModule } from './core/core.module';\n\n@Module({\n    imports: [CoreModule],\n    controllers: [ServerController]\n})\nexport class ServerModule {}","import { BootstrapFramework } from \"@rxdi/core\";\nimport { ServerModule } from \"./server.module\";\nimport { CoreModule } from \"@gapi/core\";\n\nBootstrapFramework(ServerModule, [CoreModule.forRoot({\n    server: {\n        hapi: {\n            port: 42001\n        }\n    },\n    graphql: {\n        graphiql: true,\n        openBrowser: false,\n        graphiQlPlayground: false\n    },\n    daemon: {\n        activated: true\n    }\n})]).subscribe(\n    () => console.log('Server started'),\n    console.error.bind(console)\n);\n"]}